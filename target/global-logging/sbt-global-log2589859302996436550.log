[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\mazym\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\mazym\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.7 (Oracle Corporation Java 1.8.0_401)
[debug] Load.defaultLoad until apply took 91.4491ms
[debug]           Load.loadUnit: plugins took 131.1852ms
[debug]           Load.loadUnit: defsScala took 0.2417ms
[debug] [Loading] Scanning directory C:\Users\mazym\IdeaProjects\finalprojectv2-mazymw2\project
[debug]             Load.loadUnit: mkEval took 5.4386ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\mazym\IdeaProjects\finalprojectv2-mazymw2\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 14.056 ms
[info] loading settings for project finalprojectv2-mazymw2-build from idea.sbt ...
[debug]               Load.resolveProject(finalprojectv2-mazymw2-build) took 42.8432ms
[debug]             Load.loadTransitive: finalizeProject(Project(id finalprojectv2-mazymw2-build, base: C:\Users\mazym\IdeaProjects\finalprojectv2-mazymw2\project, plugins: List(<none>))) took 88.417ms
[debug] [Loading] Done in C:\Users\mazym\IdeaProjects\finalprojectv2-mazymw2\project, returning: (finalprojectv2-mazymw2-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 317.5962ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.3532ms
[debug]         Load.loadUnit(file:/C:/Users/mazym/IdeaProjects/finalprojectv2-mazymw2/project/, ...) took 460.0859ms
[debug]       Load.apply: load took 544.3516ms
[debug]       Load.apply: resolveProjects took 4.3341ms
[debug]       Load.apply: finalTransforms took 39.7018ms
[debug]       Load.apply: config.delegates took 5.7488ms
[debug]       Load.apply: Def.make(settings)... took 356.2102ms
[debug]       Load.apply: structureIndex took 97.9911ms
[debug]       Load.apply: mkStreams took 2.0358ms
[info] loading project definition from C:\Users\mazym\IdeaProjects\finalprojectv2-mazymw2\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 1719.9028ms
[debug]     Load.loadUnit: defsScala took 0.0037ms
[debug] [Loading] Scanning directory C:\Users\mazym\IdeaProjects\finalprojectv2-mazymw2
[debug]       Load.loadUnit: mkEval took 0.2352ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.1884 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 18.9219ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\mazym\IdeaProjects\finalprojectv2-mazymw2, plugins: List(<none>))) took 22.2732ms
[debug] [Loading] Done in C:\Users\mazym\IdeaProjects\finalprojectv2-mazymw2, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 70.0226ms
[debug]     Load.loadUnit: cleanEvalClasses took 2.3529ms
[debug]   Load.loadUnit(file:/C:/Users/mazym/IdeaProjects/finalprojectv2-mazymw2/, ...) took 1793.1858ms
[debug] Load.apply: load took 1805.251ms
[debug] Load.apply: resolveProjects took 0.1263ms
[debug] Load.apply: finalTransforms took 20.0818ms
[debug] Load.apply: config.delegates took 0.3981ms
[debug] Load.apply: Def.make(settings)... took 53.1499ms
[debug] Load.apply: structureIndex took 20.1291ms
[debug] Load.apply: mkStreams took 0.0033ms
[info] set current project to scalaFXIntro (in build file:/C:/Users/mazym/IdeaProjects/finalprojectv2-mazymw2/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 50167 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 50167, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to scalaFXIntro (in build file:/C:/Users/mazym/IdeaProjects/finalprojectv2-mazymw2/)
[debug] > Exec(idea-shell, None, None)
